{"componentChunkName":"component---src-templates-blog-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"Typescript Blog","description":"Typescript topics"}},"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/postel-law/","langKey":"en"},"timeToRead":2,"frontmatter":{"date":"January 05, 2023","title":"Postel Law","spoiler":"Be conservative in what you do, be liberal in what you accept from others"}}},{"node":{"fields":{"slug":"/extend/","langKey":"en"},"timeToRead":2,"frontmatter":{"date":"January 04, 2023","title":"Extends","spoiler":"The extends keyword is used to create a subclass or specify that a type parameter must be a subclass of a particular class or implement a particular interface."}}},{"node":{"fields":{"slug":"/union/","langKey":"en"},"timeToRead":2,"frontmatter":{"date":"January 03, 2023","title":"The Union type in TypeScript: when to apply it","spoiler":"The Union type in TypeScript allows you to specify a value that can be one of several types. It is represented using the | symbol, and it is often used in cases where a value can be of multiple types, but the types are not related through inheritance."}}},{"node":{"fields":{"slug":"/generics/","langKey":"en"},"timeToRead":2,"frontmatter":{"date":"January 03, 2023","title":"Generics","spoiler":"Generics in TypeScript allow you to create reusable components that can work with a variety of types."}}},{"node":{"fields":{"slug":"/typescript/","langKey":"en"},"timeToRead":2,"frontmatter":{"date":"December 28, 2022","title":"Introduction to Typescript","spoiler":"TypeScript is a programming language that is a strict syntactical superset of JavaScript, meaning that any valid JavaScript code is also valid TypeScript code. TypeScript adds several features to JavaScript that make it easier to write and maintain large scale applications, including..."}}},{"node":{"fields":{"slug":"/intersections/","langKey":"en"},"timeToRead":1,"frontmatter":{"date":"December 28, 2022","title":"Intersections","spoiler":"In TypeScript, an intersection is a way to combine multiple types into a single type. The resulting type includes all the properties and methods of all the types that were combined. "}}}]}},"pageContext":{"langKey":"en"}},"staticQueryHashes":["336482444"]}