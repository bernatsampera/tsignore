{"componentChunkName":"component---src-templates-blog-post-js","path":"/generics/","result":{"data":{"site":{"siteMetadata":{"title":"Typescript Blog","author":"Bernat Sampera"}},"markdownRemark":{"id":"3576e87d-e85a-5897-9ab4-c21d7ad44d4f","html":"<p>Generics in TypeScript allow you to create reusable components that can work with a variety of types. Here is a simple example of how to use generics in a function:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this example, the function identity takes in a single argument of type T and returns a value of type T. You can call the function using type argument inference, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> output <span class=\"token operator\">=</span> <span class=\"token function\">identity</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string</span></code></pre></div>\n<p>Or you can specify the type argument explicitly:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> output <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// number</span></code></pre></div>\n<p>You can also use generics in classes and interfaces. Here’s an example of a generic interface:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">GenericIdentityFn</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(arg: T): T;\n}\n\nfunction identity&lt;T>(arg: T): T </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\nlet myIdentity: GenericIdentityFn = identity;</span></code></pre></div>\n<p>You can also specify the type parameter when implementing the interface:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">GenericIdentityFn<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> myIdentity<span class=\"token operator\">:</span> GenericIdentityFn<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> identity<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"when-is-it-appropriate-to-use-generics-in-typescript\"><a href=\"#when-is-it-appropriate-to-use-generics-in-typescript\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>When is it appropriate to use Generics in TypeScript?</h2>\n<p>Generics are useful in TypeScript because they allow you to create reusable components that can work with a variety of types. This is especially useful when writing functions or classes that are not specific to a particular type, but that can work with any type.</p>\n<p>For example, consider the following function:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">identity</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg<span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This function takes in an argument of type <code class=\"language-text\">any</code> and returns a value of the same type. While this function is very flexible and will work with any value, it is not very type-safe. The function doesn’t provide any information about the type of the argument or the return value, so the caller of the function doesn’t have any type guarantees.</p>\n<p>On the other hand, if we rewrite the function using generics, we get the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, the function takes in an argument of type <code class=\"language-text\">T</code> and returns a value of the same type. When calling the function, the caller can specify the type argument, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> output <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string</span></code></pre></div>\n<p>This makes the function more type-safe, because the caller knows that the return value will be of the same type as the argument.</p>\n<p>Generics are also useful when creating classes and interfaces that are not specific to a particular type, but that can work with a variety of types. This allows you to create more flexible and reusable components that can be easily adapted to different situations.</p>","timeToRead":2,"frontmatter":{"title":"Generics","date":"January 03, 2023","spoiler":"Generics in TypeScript allow you to create reusable components that can work with a variety of types.","cta":null},"fields":{"slug":"/generics/","langKey":"en"}}},"pageContext":{"slug":"/generics/","previous":{"fields":{"slug":"/typescript/","langKey":"en","directoryName":"typescript"},"frontmatter":{"title":"Introduction to Typescript"}},"next":{"fields":{"slug":"/union/","langKey":"en","directoryName":"union"},"frontmatter":{"title":"The Union type in TypeScript: when to apply it"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}