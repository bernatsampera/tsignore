{"version":3,"sources":["webpack:///./src/components/SEO.js","webpack:///./src/components/Panel.js","webpack:///./src/utils/helpers.js","webpack:///./src/components/Bio.js","webpack:///./src/components/Footer.js","webpack:///./src/templates/blog-index.js"],"names":["SEO","meta","image","title","description","slug","lang","query","render","data","siteMetadata","site","metaDescription","metaImage","siteUrl","url","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","Panel","children","style","fontSize","border","borderRadius","padding","background","wordBreak","formatReadingTime","minutes","cups","Math","round","Array","E","fill","join","formatPostDate","date","Date","prototype","toLocaleDateString","args","day","month","year","filter","Boolean","Bio","display","maxWidth","href","React","Component","Footer","marginTop","rhythm","paddingTop","BlogIndexTemplate","siteTitle","get","this","langKey","props","pageContext","posts","Layout","location","flexDirection","gap","minWidth","id","slice","map","node","fields","key","width","fontFamily","margin","boxShadow","to","rel","frontmatter","timeToRead","dangerouslySetInnerHTML","__html","spoiler","marginBottom"],"mappings":"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","file":"component---src-templates-blog-index-js-f0e9de2f15bed4fa297f.js","sourcesContent":["import React from 'react';\nimport Helmet from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport { StaticQuery, graphql } from 'gatsby';\n\nconst query = graphql`\n  query GetSiteMetadata {\n    site {\n      siteMetadata {\n        title\n        author\n        description\n        siteUrl\n        social {\n          twitter\n        }\n      }\n    }\n  }\n`;\n\nfunction SEO({ meta, image, title, description, slug, lang = 'en' }) {\n  return (\n    <StaticQuery\n      query={query}\n      render={data => {\n        const { siteMetadata } = data.site;\n        const metaDescription = description || siteMetadata.description;\n        const metaImage = image ? `${siteMetadata.siteUrl}/${image}` : null;\n        const url = `${siteMetadata.siteUrl}${slug}`;\n        return (\n          <Helmet\n            htmlAttributes={{ lang }}\n            {...(title\n              ? {\n                  titleTemplate: `%s ‚Äî ${siteMetadata.title}`,\n                  title,\n                }\n              : {\n                  title: `${siteMetadata.title} ‚Äî A blog by Bernat Sampera`,\n                })}\n            meta={[\n              {\n                name: 'description',\n                content: metaDescription,\n              },\n              {\n                property: 'og:url',\n                content: url,\n              },\n              {\n                property: 'og:title',\n                content: title || siteMetadata.title,\n              },\n              {\n                property: 'og:description',\n                content: metaDescription,\n              },\n              {\n                name: 'twitter:card',\n                content: 'summary',\n              },\n              {\n                name: 'twitter:creator',\n                content: siteMetadata.social.twitter,\n              },\n              {\n                name: 'twitter:title',\n                content: title || siteMetadata.title,\n              },\n              {\n                name: 'twitter:description',\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                metaImage\n                  ? [\n                      {\n                        property: 'og:image',\n                        content: metaImage,\n                      },\n                      {\n                        name: 'twitter:image',\n                        content: metaImage,\n                      },\n                    ]\n                  : []\n              )\n              .concat(meta)}\n          />\n        );\n      }}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  meta: [],\n  title: '',\n  slug: '',\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  image: PropTypes.string,\n  meta: PropTypes.array,\n  slug: PropTypes.string,\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","import React from 'react';\n\nfunction Panel({ children, style = {} }) {\n  return (\n    <p\n      style={{\n        fontSize: '0.9em',\n        border: '1px solid var(--hr)',\n        borderRadius: '0.75em',\n        padding: '0.75em',\n        background: 'var(--inlineCode-bg)',\n        wordBreak: 'keep-all',\n        ...style,\n      }}\n    >\n      {children}\n    </p>\n  );\n}\n\nexport default Panel;\n","export function formatReadingTime(minutes) {\n  let cups = Math.round(minutes / 5);\n  let bowls = 0;\n  if (cups > 5) {\n    return `${new Array(Math.round(cups / Math.E))\n      .fill('üç±')\n      .join('')} ${minutes} min read`;\n  } else {\n    return `${new Array(cups || 1).fill('‚è±Ô∏è').join('')} ${minutes} min read`;\n  }\n}\n\n// `lang` is optional and will default to the current user agent locale\nexport function formatPostDate(date, lang) {\n  if (typeof Date.prototype.toLocaleDateString !== 'function') {\n    return date;\n  }\n\n  date = new Date(date);\n  const args = [\n    lang,\n    { day: 'numeric', month: 'long', year: 'numeric' },\n  ].filter(Boolean);\n  return date.toLocaleDateString(...args);\n}\n","import React from 'react';\nimport { rhythm } from '../utils/typography';\n\nclass Bio extends React.Component {\n  render() {\n    return (\n      <div\n        style={{\n          display: 'flex',\n        }}\n      >\n        <p style={{ maxWidth: 310 }}>\n          Typescript blog by\n          <a href=\"\"> Bernat Sampera</a>.\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Bio;\n","import React from 'react';\n\nimport { rhythm } from '../utils/typography';\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <footer\n        style={{\n          marginTop: rhythm(2.5),\n          paddingTop: rhythm(1),\n        }}\n      >\n        {/* <div style={{ float: 'right' }}>\n          <a href=\"/rss.xml\" target=\"_blank\" rel=\"noopener noreferrer\">\n            rss\n          </a>\n        </div>\n        <a\n          href=\"https://mobile.twitter.com/dan_abramov\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          twitter\n        </a>{' '}\n        &bull;{' '}\n        <a\n          href=\"https://github.com/bsampera\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          github\n        </a>{' '}\n        &bull;{' '}\n        <a\n          href=\"https://stackoverflow.com/users/458193/dan-abramov\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          stack overflow\n        </a> */}\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import { Link, graphql } from 'gatsby';\nimport { formatPostDate, formatReadingTime } from '../utils/helpers';\n\nimport Bio from '../components/Bio';\nimport Footer from '../components/Footer';\nimport Layout from '../components/Layout';\nimport Panel from '../components/Panel';\nimport React from 'react';\nimport SEO from '../components/SEO';\nimport get from 'lodash/get';\nimport { rhythm } from '../utils/typography';\nimport './blog-index.css';\n\nconst NUMBER_OF_RECENT_POSTS = 3;\n\nclass BlogIndexTemplate extends React.Component {\n  render() {\n    const siteTitle = get(this, 'props.data.site.siteMetadata.title');\n    const langKey = this.props.pageContext.langKey;\n\n    const posts = get(this, 'props.data.allMarkdownRemark.edges');\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO />\n        <aside>\n          <Bio />\n        </aside>\n        <main\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: '30px',\n          }}\n        >\n          <div\n            style={{\n              minWidth: '400px',\n            }}\n          >\n            <h2> Recent Posts </h2>\n            <div id=\"recent-posts-container\">\n              {posts.slice(0, NUMBER_OF_RECENT_POSTS).map(({ node }) => {\n                const title =\n                  get(node, 'frontmatter.title') || node.fields.slug;\n                return (\n                  <article\n                    key={node.fields.slug}\n                    style={{\n                      width: rhythm(10),\n                    }}\n                  >\n                    <header>\n                      <h3\n                        style={{\n                          fontFamily: 'Raleway, sans-serif',\n                          fontSize: rhythm(1),\n                          margin: `${rhythm(1 / 5)} 0`,\n                        }}\n                      >\n                        <Link\n                          style={{ boxShadow: 'none' }}\n                          to={node.fields.slug}\n                          rel=\"bookmark\"\n                        >\n                          {title}\n                        </Link>\n                      </h3>\n                      <small>\n                        {formatPostDate(node.frontmatter.date, langKey)}\n                        {` ‚Ä¢ ${formatReadingTime(node.timeToRead)}`}\n                      </small>\n                    </header>\n                    <p\n                      dangerouslySetInnerHTML={{\n                        __html: node.frontmatter.spoiler,\n                      }}\n                    />\n                  </article>\n                );\n              })}\n            </div>\n          </div>\n          <div>\n            <h2> All Posts </h2>\n\n            {posts.slice(NUMBER_OF_RECENT_POSTS).map(({ node }) => {\n              const title = get(node, 'frontmatter.title') || node.fields.slug;\n              return (\n                <article key={node.fields.slug}>\n                  <header>\n                    <h3\n                      style={{\n                        fontFamily: 'Raleway, sans-serif',\n                        fontSize: rhythm(1),\n                        marginBottom: rhythm(1 / 4),\n                      }}\n                    >\n                      <Link\n                        style={{ boxShadow: 'none' }}\n                        to={node.fields.slug}\n                        rel=\"bookmark\"\n                      >\n                        {title}\n                      </Link>\n                    </h3>\n                    <small>\n                      {formatPostDate(node.frontmatter.date, langKey)}\n                      {` ‚Ä¢ ${formatReadingTime(node.timeToRead)}`}\n                    </small>\n                  </header>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: node.frontmatter.spoiler,\n                    }}\n                  />\n                </article>\n              );\n            })}\n          </div>\n        </main>\n        <Footer />\n      </Layout>\n    );\n  }\n}\n\nexport default BlogIndexTemplate;\n\nexport const pageQuery = graphql`\n  query($langKey: String!) {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMarkdownRemark(\n      filter: { fields: { langKey: { eq: $langKey } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            langKey\n          }\n          timeToRead\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            spoiler\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}